---
name: Build
on:
  workflow_call:
    inputs:
      build_version:
        description: "The version to build.  It must be semver-compliant, and must not be for a tag that already exists."
        required: false
        type: string
    secrets:
      JRELEASER_GPG_SECRET_KEY:
        required: false
        description: "The GPG Secret Key used to sign produced artifacts."
      JRELEASER_GPG_PASSPHRASE:
        required: false
        description: "The passphrase to the GPG Secret Key used to sign produced artifacts."
      JRELEASER_MAVENCENTRAL_TOKEN:
        required: false
        description: "The maven central token provisioned to upload artifacts."

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: 'true'
          fetch-depth: 0

      - name: Setup golang
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.2

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Setup gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Determine Build Version
        env:
          ENGINE_BUILD_VERSION: ${{ inputs.build_version }}
        run: |
          ./gradlew writeVersion

      - name: Read Version File
        id: getversion
        run: |
          test -f build/version.txt
          echo "version=$(cat build/version.txt)" >> $GITHUB_OUTPUT

      - name: Build
        env:
          ENGINE_BUILD_VERSION: ${{ steps.getversion.outputs.version }}
        run: |
          ./gradlew build

      - name: Stage Artifacts
        env:
          ENGINE_BUILD_VERSION: ${{ steps.getversion.outputs.version }}
        run: |
          ./gradlew buildApiDefinitionDistribution buildSite stageMavenCentral

      - name: Upload Version
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: build/version.txt
          if-no-files-found: error

      - name: Upload maven
        uses: actions/upload-artifact@v4
        with:
          name: staging-maven
          path: build/staging/maven-central
          if-no-files-found: error

      - name: Upload protoset distribution
        uses: actions/upload-artifact@v4
        with:
          name: dist-protoset
          path: build/dist/*descriptor_set*.desc
          if-no-files-found: error

      - name: Upload swagger distribution
        uses: actions/upload-artifact@v4
        with:
          name: dist-swagger
          path: build/dist/engine-partner-api*.swagger.json
          if-no-files-found: error

      - name: Upload proto distribution
        uses: actions/upload-artifact@v4
        with:
          name: dist-proto
          path: build/dist/*protos*.zip
          if-no-files-found: error

      - name: Upload Github Pages Artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'build/dist/site'
